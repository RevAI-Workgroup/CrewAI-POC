name: CD - Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Detect changes for smart building
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            docker:
              - 'docker/**'
              - '**/Dockerfile'
              - 'docker-compose*.yml'
      
      - name: Generate version
        id: version
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.1.0-$(git rev-parse --short HEAD)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # Full test suite for main branch
  full-test-suite:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        test-type: [unit, integration]
        component: [backend, frontend]
        exclude:
          - component: frontend
            test-type: integration
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: crewai_test
          POSTGRES_USER: crewai_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Backend Environment
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Setup Frontend Environment
        if: matrix.component == 'frontend'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install Backend Dependencies
        if: matrix.component == 'backend'
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Frontend Dependencies
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          bun install --frozen-lockfile
      
      - name: Run Backend Tests
        if: matrix.component == 'backend'
        env:
          DATABASE_URL: postgresql://crewai_test:test_password@localhost:5432/crewai_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-testing-only
          ENCRYPTION_KEY: test-encryption-key-32-chars-long!
        run: |
          cd backend
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            pytest -m "unit" --cov=. --cov-report=xml --numprocesses=auto
          else
            pytest -m "integration" --cov=. --cov-report=xml --numprocesses=2
          fi
      
      - name: Run Frontend Tests
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          bun run test:coverage
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.component }}/coverage.xml
          flags: ${{ matrix.component }}-${{ matrix.test-type }}
          name: ${{ matrix.component }}-${{ matrix.test-type }}-main

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-changes, full-test-suite]
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-changes.outputs.version }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.component }}-prod
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.component }}-prod
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ needs.detect-changes.outputs.version }}

  # Performance tests (run on schedule or manual trigger)
  performance-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: needs.detect-changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: crewai_test
          POSTGRES_USER: crewai_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run performance tests
        env:
          DATABASE_URL: postgresql://crewai_test:test_password@localhost:5432/crewai_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-testing-only
          ENCRYPTION_KEY: test-encryption-key-32-chars-long!
        run: |
          cd backend
          pytest -m "performance" \
            --benchmark-only \
            --benchmark-json=benchmark.json \
            --benchmark-min-rounds=3
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: backend/benchmark.json

  # Deploy to staging automatically
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.detect-changes.outputs.version }}"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.detect-changes.outputs.version }}"
          
          # Here you would typically:
          # 1. Update docker-compose files with new image tags
          # 2. Deploy to staging server (via SSH, kubectl, etc.)
          # 3. Run smoke tests
          # 4. Update deployment status
          
          echo "âœ… Staging deployment completed"
      
      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests against staging..."
          # Add your smoke test commands here
          sleep 5  # Simulate test execution
          echo "âœ… Smoke tests passed"

  # Production deployment (manual approval required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push, deploy-staging]
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.detect-changes.outputs.version }}"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.detect-changes.outputs.version }}"
          
          # Production deployment steps:
          # 1. Blue-green deployment
          # 2. Database migrations
          # 3. Health checks
          # 4. Traffic switching
          
          echo "âœ… Production deployment completed"

  # Cleanup old images and artifacts
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    steps:
      - name: Delete old package versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-backend
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
      
      - name: Delete old package versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-frontend
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true 