name: CI - Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Detect which components have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
      any-code: ${{ steps.changes.outputs.backend == 'true' || steps.changes.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements.txt'
              - 'backend/requirements.txt'
            frontend:
              - 'frontend/**'
              - 'package.json'
              - 'frontend/package.json'
              - 'frontend/bun.lock'
            docker:
              - 'docker/**'
              - '**/Dockerfile'
              - '**/.dockerignore'
              - 'docker-compose*.yml'

  # Backend linting and fast tests
  backend-checks:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          cd backend
          flake8 . --max-line-length=100 --ignore=E203,W503 --exclude=__pycache__,migrations,venv
      
      - name: Format check with black
        run: |
          cd backend
          black --check --diff .
      
      - name: Import sort check with isort
        run: |
          cd backend
          isort --check-only --diff .
      
      - name: Run fast unit tests
        run: |
          cd backend
          pytest -m "unit" \
            --numprocesses=auto \
            --dist=worksteal \
            --tb=short \
            --quiet \
            --disable-warnings \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing:skip-covered
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-unit
          name: backend-unit-tests

  # Frontend linting and fast tests
  frontend-checks:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: |
          cd frontend
          bun install --frozen-lockfile
      
      - name: Lint
        run: |
          cd frontend
          bun run lint
      
      - name: Format check
        run: |
          cd frontend
          bun run format:check
      
      - name: Type check
        run: |
          cd frontend
          bun run build --mode development
      
      - name: Run fast tests
        run: |
          cd frontend
          bun run vitest run \
            --reporter=verbose \
            --threads \
            --pool-options.threads.maxThreads=4 \
            --pool-options.threads.minThreads=1 \
            --coverage \
            --run
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-tests

  # Integration tests (only if code changes detected)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-checks]
    if: needs.detect-changes.outputs.backend == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: crewai_test
          POSTGRES_USER: crewai_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://crewai_test:test_password@localhost:5432/crewai_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-testing-only
          ENCRYPTION_KEY: test-encryption-key-32-chars-long!
        run: |
          cd backend
          pytest -m "integration" \
            --numprocesses=2 \
            --dist=worksteal \
            --tb=line \
            --cov=. \
            --cov-report=xml
      
      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-integration
          name: backend-integration-tests

  # Docker build tests (only if Docker files changed)
  docker-build-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docker == 'true' || needs.detect-changes.outputs.any-code == 'true'
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build ${{ matrix.component }} (development)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          target: development
          push: false
          cache-from: type=gha,scope=${{ matrix.component }}-dev
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}-dev
          tags: crewai-${{ matrix.component }}:dev-test
      
      - name: Build ${{ matrix.component }} (production)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          target: production
          push: false
          cache-from: type=gha,scope=${{ matrix.component }}-prod
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}-prod
          tags: crewai-${{ matrix.component }}:prod-test

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-code == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Summary job
  ci-success:
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-checks, frontend-checks, integration-tests, docker-build-test, security-scan]
    if: always()
    steps:
      - name: Check CI success
        run: |
          echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Checks | ${{ needs.backend-checks.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Checks | ${{ needs.frontend-checks.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build-test.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any required job failed
          if [[ "${{ needs.backend-checks.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-checks.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-build-test.result }}" == "failure" ]]; then
            echo "❌ CI failed"
            exit 1
          else
            echo "✅ CI passed"
          fi 